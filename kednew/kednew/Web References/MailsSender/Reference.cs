//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34003
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.34003 版自动生成。
// 
#pragma warning disable 1591

namespace kednew.MailsSender {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailAppSoap", Namespace="http://tempuri.org/")]
    public partial class MailApp : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMailbyIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailbyNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailbyGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailbyGIDOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MailApp() {
            this.Url = global::kednew.Properties.Settings.Default.kednew_MailSend_MailApp;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMailbyIDCompletedEventHandler SendMailbyIDCompleted;
        
        /// <remarks/>
        public event SendMailbyNameCompletedEventHandler SendMailbyNameCompleted;
        
        /// <remarks/>
        public event SendMailbyGroupCompletedEventHandler SendMailbyGroupCompleted;
        
        /// <remarks/>
        public event SendMailbyGIDCompletedEventHandler SendMailbyGIDCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailbyID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailbyID(string MailGruop, string Subject, string Body) {
            object[] results = this.Invoke("SendMailbyID", new object[] {
                        MailGruop,
                        Subject,
                        Body});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailbyIDAsync(string MailGruop, string Subject, string Body) {
            this.SendMailbyIDAsync(MailGruop, Subject, Body, null);
        }
        
        /// <remarks/>
        public void SendMailbyIDAsync(string MailGruop, string Subject, string Body, object userState) {
            if ((this.SendMailbyIDOperationCompleted == null)) {
                this.SendMailbyIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailbyIDOperationCompleted);
            }
            this.InvokeAsync("SendMailbyID", new object[] {
                        MailGruop,
                        Subject,
                        Body}, this.SendMailbyIDOperationCompleted, userState);
        }
        
        private void OnSendMailbyIDOperationCompleted(object arg) {
            if ((this.SendMailbyIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailbyIDCompleted(this, new SendMailbyIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailbyName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailbyName(string toAddressName, string ccAddressName, string subject, string body) {
            object[] results = this.Invoke("SendMailbyName", new object[] {
                        toAddressName,
                        ccAddressName,
                        subject,
                        body});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailbyNameAsync(string toAddressName, string ccAddressName, string subject, string body) {
            this.SendMailbyNameAsync(toAddressName, ccAddressName, subject, body, null);
        }
        
        /// <remarks/>
        public void SendMailbyNameAsync(string toAddressName, string ccAddressName, string subject, string body, object userState) {
            if ((this.SendMailbyNameOperationCompleted == null)) {
                this.SendMailbyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailbyNameOperationCompleted);
            }
            this.InvokeAsync("SendMailbyName", new object[] {
                        toAddressName,
                        ccAddressName,
                        subject,
                        body}, this.SendMailbyNameOperationCompleted, userState);
        }
        
        private void OnSendMailbyNameOperationCompleted(object arg) {
            if ((this.SendMailbyNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailbyNameCompleted(this, new SendMailbyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailbyGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailbyGroup(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath) {
            object[] results = this.Invoke("SendMailbyGroup", new object[] {
                        MailGroup,
                        Subject,
                        Body,
                        IsDynAddress,
                        AttachFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailbyGroupAsync(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath) {
            this.SendMailbyGroupAsync(MailGroup, Subject, Body, IsDynAddress, AttachFilePath, null);
        }
        
        /// <remarks/>
        public void SendMailbyGroupAsync(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath, object userState) {
            if ((this.SendMailbyGroupOperationCompleted == null)) {
                this.SendMailbyGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailbyGroupOperationCompleted);
            }
            this.InvokeAsync("SendMailbyGroup", new object[] {
                        MailGroup,
                        Subject,
                        Body,
                        IsDynAddress,
                        AttachFilePath}, this.SendMailbyGroupOperationCompleted, userState);
        }
        
        private void OnSendMailbyGroupOperationCompleted(object arg) {
            if ((this.SendMailbyGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailbyGroupCompleted(this, new SendMailbyGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailbyGID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailbyGID(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath) {
            object[] results = this.Invoke("SendMailbyGID", new object[] {
                        MailGroup,
                        Subject,
                        Body,
                        IsDynAddress,
                        AttachFilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailbyGIDAsync(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath) {
            this.SendMailbyGIDAsync(MailGroup, Subject, Body, IsDynAddress, AttachFilePath, null);
        }
        
        /// <remarks/>
        public void SendMailbyGIDAsync(string MailGroup, string Subject, string Body, string IsDynAddress, string AttachFilePath, object userState) {
            if ((this.SendMailbyGIDOperationCompleted == null)) {
                this.SendMailbyGIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailbyGIDOperationCompleted);
            }
            this.InvokeAsync("SendMailbyGID", new object[] {
                        MailGroup,
                        Subject,
                        Body,
                        IsDynAddress,
                        AttachFilePath}, this.SendMailbyGIDOperationCompleted, userState);
        }
        
        private void OnSendMailbyGIDOperationCompleted(object arg) {
            if ((this.SendMailbyGIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailbyGIDCompleted(this, new SendMailbyGIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMailbyIDCompletedEventHandler(object sender, SendMailbyIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailbyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailbyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMailbyNameCompletedEventHandler(object sender, SendMailbyNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailbyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailbyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMailbyGroupCompletedEventHandler(object sender, SendMailbyGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailbyGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailbyGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendMailbyGIDCompletedEventHandler(object sender, SendMailbyGIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailbyGIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailbyGIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591